initSidebarItems({"keyword":[["as","The keyword for casting a value to a type."],["const","The keyword for defining constants."],["crate","The `crate` keyword."],["enum","For defining enumerations."],["extern","For external connections in Rust code."],["fn","The keyword for defining functions."],["for","The `for` keyword."],["if","If statements and expressions."],["impl","The implementation-defining keyword."],["let","The variable binding keyword."],["loop","The loop-defining keyword."],["struct","The keyword used to define structs."]],"macro":[["assert","Ensure that a boolean expression is `true` at runtime."],["assert_eq","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["assert_ne","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["await","A macro to await on an async call."],["cfg","Boolean evaluation of configuration flags, at compile-time."],["column","A macro which expands to the column number on which it was invoked."],["compile_error","Unconditionally causes compilation to fail with the given error message when encountered."],["concat","Concatenates literals into a static string slice."],["concat_idents","Concatenate identifiers into one identifier."],["dbg","A macro for quick and dirty debugging with which you can inspect the value of a given expression. An example:"],["debug_assert","Ensure that a boolean expression is `true` at runtime."],["debug_assert_eq","Asserts that two expressions are equal to each other."],["debug_assert_ne","Asserts that two expressions are not equal to each other."],["env","Inspect an environment variable at compile time."],["eprint","Macro for printing to the standard error."],["eprintln","Macro for printing to the standard error, with a newline."],["file","A macro which expands to the file name from which it was invoked."],["format","Creates a `String` using interpolation of runtime expressions."],["format_args","The core macro for formatted string creation & output."],["include","Parse a file as an expression or an item according to the context."],["include_bytes","Includes a file as a reference to a byte array."],["include_str","Includes a utf8-encoded file as a string."],["is_aarch64_feature_detected","Prevents compilation if `is_aarch64_feature_detected` is used somewhere else than `aarch64` targets."],["is_arm_feature_detected","Prevents compilation if `is_arm_feature_detected` is used somewhere else than `ARM` targets."],["is_mips64_feature_detected","Prevents compilation if `is_mips64_feature_detected` is used somewhere else than `MIPS64` targets."],["is_mips_feature_detected","Prevents compilation if `is_mips_feature_detected` is used somewhere else than `MIPS` targets."],["is_powerpc64_feature_detected","Prevents compilation if `is_powerpc64_feature_detected` is used somewhere else than `PowerPC64` targets."],["is_powerpc_feature_detected","Prevents compilation if `is_powerpc_feature_detected` is used somewhere else than `PowerPC` targets."],["is_x86_feature_detected","A macro to test at runtime whether a CPU feature is available on x86/x86-64 platforms."],["line","A macro which expands to the line number on which it was invoked."],["module_path","Expands to a string that represents the current module path."],["option_env","Optionally inspect an environment variable at compile time."],["panic","The entry point for panic of Rust threads."],["print","Macro for printing to the standard output."],["println","Macro for printing to the standard output, with a newline."],["select","A macro to select an event from a number of receivers."],["stringify","A macro which stringifies its arguments."],["thread_local","Declare a new thread local storage key of type [`std::thread::LocalKey`]."],["try","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors."],["unimplemented","A standardized placeholder for marking unfinished code."],["unreachable","A utility macro for indicating unreachable code."],["vec","Creates a [`Vec`] containing the arguments."],["write","Write formatted data into a buffer."],["writeln","Write formatted data into a buffer, with a newline appended."]],"mod":[["alloc","Memory allocation APIs"],["any","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["ascii","Operations on ASCII strings and characters."],["borrow","A module for working with borrowed data."],["boxed","A pointer type for heap allocation."],["cell","Shareable mutable containers."],["char","A character type."],["clone","The `Clone` trait for types that cannot be 'implicitly copied'."],["cmp","Functionality for ordering and comparison."],["collections","Collection types."],["convert","Traits for conversions between types."],["default","The `Default` trait for types which may have meaningful default values."],["env","Inspection and manipulation of the process's environment."],["error","Traits for working with Errors."],["f32","This module provides constants which are specific to the implementation of the `f32` floating point data type."],["f64","This module provides constants which are specific to the implementation of the `f64` floating point data type."],["ffi","Utilities related to FFI bindings."],["fmt","Utilities for formatting and printing `String`s."],["fs","Filesystem manipulation operations."],["future","Asynchronous values."],["hash","Generic hashing support."],["hint","Hints to compiler that affects how code should be emitted or optimized."],["i128","The 128-bit signed integer type."],["i16","The 16-bit signed integer type."],["i32","The 32-bit signed integer type."],["i64","The 64-bit signed integer type."],["i8","The 8-bit signed integer type."],["intrinsics","Compiler intrinsics."],["io","Traits, helpers, and type definitions for core I/O functionality."],["isize","The pointer-sized signed integer type."],["iter","Composable external iteration."],["marker","Primitive traits and types representing basic properties of types."],["mem","Basic functions for dealing with memory."],["net","Networking primitives for TCP/UDP communication."],["num","Additional functionality for numerics."],["ops","Overloadable operators."],["option","Optional values."],["os","OS-specific functionality."],["panic","Panic support in the standard library."],["path","Cross-platform path manipulation."],["pin","Types which pin data to its location in memory"],["prelude","The Rust Prelude."],["process","A module for working with processes."],["ptr","Manually manage memory through raw pointers."],["raw","Contains struct definitions for the layout of compiler built-in types."],["rc","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["result","Error handling with the `Result` type."],["slice","A dynamically-sized view into a contiguous sequence, `[T]`."],["str","Unicode string slices."],["string","A UTF-8 encoded, growable string."],["sync","Useful synchronization primitives."],["task","Types and Traits for working with asynchronous tasks."],["thread","Native threads."],["time","Temporal quantification."],["u128","The 128-bit unsigned integer type."],["u16","The 16-bit unsigned integer type."],["u32","The 32-bit unsigned integer type."],["u64","The 64-bit unsigned integer type."],["u8","The 8-bit unsigned integer type."],["usize","The pointer-sized unsigned integer type."],["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]],"primitive":[["array","A fixed-size array, denoted `[T; N]`, for the element type, `T`, and the non-negative compile-time constant size, `N`."],["bool","The boolean type."],["char","A character type."],["f32","The 32-bit floating point type."],["f64","The 64-bit floating point type."],["fn","Function pointers, like `fn(usize) -> bool`."],["i128","The 128-bit signed integer type."],["i16","The 16-bit signed integer type."],["i32","The 32-bit signed integer type."],["i64","The 64-bit signed integer type."],["i8","The 8-bit signed integer type."],["isize","The pointer-sized signed integer type."],["never","The `!` type, also called \"never\"."],["pointer","Raw, unsafe pointers, `*const T`, and `*mut T`."],["reference","References, both shared and mutable."],["slice","A dynamically-sized view into a contiguous sequence, `[T]`."],["str","String slices."],["tuple","A finite heterogeneous sequence, `(T, U, ..)`."],["u128","The 128-bit unsigned integer type."],["u16","The 16-bit unsigned integer type."],["u32","The 32-bit unsigned integer type."],["u64","The 64-bit unsigned integer type."],["u8","The 8-bit unsigned integer type."],["unit","The `()` type, sometimes called \"unit\" or \"nil\"."],["usize","The pointer-sized unsigned integer type."]]});