initSidebarItems({"fn":[["__DMB","Data Memory Barrier"],["__DSB","Data Synchronization Barrier"],["__ISB","Instruction Synchronization Barrier"],["__NOP","No Operation"],["__SEV","Send Event"],["__WFE","Wait For Event"],["__WFI","Wait For Interrupt"],["__breakpoint","Inserts a breakpoint instruction."],["__crc32b","CRC32 single round checksum for bytes (8 bits)."],["__crc32cb","CRC32-C single round checksum for bytes (8 bits)."],["__crc32cd","CRC32-C single round checksum for quad words (64 bits)."],["__crc32ch","CRC32-C single round checksum for half words (16 bits)."],["__crc32cw","CRC32-C single round checksum for words (32 bits)."],["__crc32d","CRC32 single round checksum for quad words (64 bits)."],["__crc32h","CRC32 single round checksum for half words (16 bits)."],["__crc32w","CRC32 single round checksum for words (32 bits)."],["__disable_fault_irq","Disable FIQ"],["__disable_irq","Disable IRQ Interrupts"],["__enable_fault_irq","Enable FIQ"],["__enable_irq","Enable IRQ Interrupts"],["__get_APSR","Get APSR Register"],["__get_BASEPRI","Get Base Priority"],["__get_CONTROL","Get Control Register"],["__get_FAULTMASK","Get Fault Mask"],["__get_IPSR","Get IPSR Register"],["__get_MSP","Get Main Stack Pointer"],["__get_PRIMASK","Get Priority Mask"],["__get_PSP","Get Process Stack Pointer"],["__get_xPSR","Get xPSR Register"],["__set_BASEPRI","Set Base Priority"],["__set_BASEPRI_MAX","Set Base Priority with condition"],["__set_CONTROL","Set Control Register"],["__set_FAULTMASK","Set Fault Mask"],["__set_MSP","Set Main Stack Pointer"],["__set_PRIMASK","Set Priority Mask"],["__set_PSP","Set Process Stack Pointer"],["_cls_u32","Counts the leading most significant bits set."],["_cls_u64","Counts the leading most significant bits set."],["_clz_u64","Count Leading Zeros."],["_rbit_u64","Reverse the bit order."],["_rev_u16","Reverse the order of the bytes."],["_rev_u32","Reverse the order of the bytes."],["_rev_u64","Reverse the order of the bytes."],["brk","Generates the trap instruction `BRK 1`"],["qadd","Signed saturating addition"],["qadd16","Saturating two 16-bit integer additions"],["qadd8","Saturating four 8-bit integer additions"],["qasx","Returns the 16-bit signed saturated equivalent of"],["qsax","Returns the 16-bit signed saturated equivalent of"],["qsub","Signed saturating subtraction"],["qsub16","Saturating two 16-bit integer subtraction"],["qsub8","Saturating two 8-bit integer subtraction"],["sadd16","Returns the 16-bit signed saturated equivalent of"],["sadd8","Returns the 8-bit signed saturated equivalent of"],["sasx","Returns the 16-bit signed equivalent of"],["sel","Select bytes from each operand according to APSR GE flags"],["shadd16","Signed halving parallel halfword-wise addition."],["shadd8","Signed halving parallel byte-wise addition."],["shsub16","Signed halving parallel halfword-wise subtraction."],["shsub8","Signed halving parallel byte-wise subtraction."],["smlad","Dual 16-bit Signed Multiply with Addition of products and 32-bit accumulation."],["smlsd","Dual 16-bit Signed Multiply with Subtraction  of products and 32-bit accumulation and overflow detection."],["smuad","Signed Dual Multiply Add."],["smuadx","Signed Dual Multiply Add Reversed."],["smusd","Signed Dual Multiply Subtract."],["smusdx","Signed Dual Multiply Subtract Reversed."],["usad8","Sum of 8-bit absolute differences."],["usad8a","Sum of 8-bit absolute differences and constant."],["vadd_f32","Vector add."],["vadd_f64","Vector add."],["vadd_s16","Vector add."],["vadd_s32","Vector add."],["vadd_s8","Vector add."],["vadd_u16","Vector add."],["vadd_u32","Vector add."],["vadd_u8","Vector add."],["vaddd_s64","Vector add."],["vaddd_u64","Vector add."],["vaddl_s16","Vector long add."],["vaddl_s32","Vector long add."],["vaddl_s8","Vector long add."],["vaddl_u16","Vector long add."],["vaddl_u32","Vector long add."],["vaddl_u8","Vector long add."],["vaddq_f32","Vector add."],["vaddq_f64","Vector add."],["vaddq_s16","Vector add."],["vaddq_s32","Vector add."],["vaddq_s64","Vector add."],["vaddq_s8","Vector add."],["vaddq_u16","Vector add."],["vaddq_u32","Vector add."],["vaddq_u64","Vector add."],["vaddq_u8","Vector add."],["vaesdq_u8","AES single round decryption."],["vaeseq_u8","AES single round encryption."],["vaesimcq_u8","AES inverse mix columns."],["vaesmcq_u8","AES mix columns."],["vcombine_f32","Vector combine"],["vcombine_f64","Vector combine"],["vcombine_p16","Vector combine"],["vcombine_p64","Vector combine"],["vcombine_p8","Vector combine"],["vcombine_s16","Vector combine"],["vcombine_s32","Vector combine"],["vcombine_s64","Vector combine"],["vcombine_s8","Vector combine"],["vcombine_u16","Vector combine"],["vcombine_u32","Vector combine"],["vcombine_u64","Vector combine"],["vcombine_u8","Vector combine"],["vmaxv_f32","Horizontal vector max."],["vmaxv_s16","Horizontal vector max."],["vmaxv_s32","Horizontal vector max."],["vmaxv_s8","Horizontal vector max."],["vmaxv_u16","Horizontal vector max."],["vmaxv_u32","Horizontal vector max."],["vmaxv_u8","Horizontal vector max."],["vmaxvq_f32","Horizontal vector max."],["vmaxvq_f64","Horizontal vector max."],["vmaxvq_s16","Horizontal vector max."],["vmaxvq_s32","Horizontal vector max."],["vmaxvq_s8","Horizontal vector max."],["vmaxvq_u16","Horizontal vector max."],["vmaxvq_u32","Horizontal vector max."],["vmaxvq_u8","Horizontal vector max."],["vminv_f32","Horizontal vector min."],["vminv_s16","Horizontal vector min."],["vminv_s32","Horizontal vector min."],["vminv_s8","Horizontal vector min."],["vminv_u16","Horizontal vector min."],["vminv_u32","Horizontal vector min."],["vminv_u8","Horizontal vector min."],["vminvq_f32","Horizontal vector min."],["vminvq_f64","Horizontal vector min."],["vminvq_s16","Horizontal vector min."],["vminvq_s32","Horizontal vector min."],["vminvq_s8","Horizontal vector min."],["vminvq_u16","Horizontal vector min."],["vminvq_u32","Horizontal vector min."],["vminvq_u8","Horizontal vector min."],["vmovl_s16","Vector long move."],["vmovl_s32","Vector long move."],["vmovl_s8","Vector long move."],["vmovl_u16","Vector long move."],["vmovl_u32","Vector long move."],["vmovl_u8","Vector long move."],["vmovn_s16","Vector narrow integer."],["vmovn_s32","Vector narrow integer."],["vmovn_s64","Vector narrow integer."],["vmovn_u16","Vector narrow integer."],["vmovn_u32","Vector narrow integer."],["vmovn_u64","Vector narrow integer."],["vpmax_f32","Folding maximum of adjacent pairs"],["vpmax_s16","Folding maximum of adjacent pairs"],["vpmax_s32","Folding maximum of adjacent pairs"],["vpmax_s8","Folding maximum of adjacent pairs"],["vpmax_u16","Folding maximum of adjacent pairs"],["vpmax_u32","Folding maximum of adjacent pairs"],["vpmax_u8","Folding maximum of adjacent pairs"],["vpmaxq_f32","Folding maximum of adjacent pairs"],["vpmaxq_f64","Folding maximum of adjacent pairs"],["vpmaxq_s16","Folding maximum of adjacent pairs"],["vpmaxq_s32","Folding maximum of adjacent pairs"],["vpmaxq_s8","Folding maximum of adjacent pairs"],["vpmaxq_u16","Folding maximum of adjacent pairs"],["vpmaxq_u32","Folding maximum of adjacent pairs"],["vpmaxq_u8","Folding maximum of adjacent pairs"],["vpmin_f32","Folding minimum of adjacent pairs"],["vpmin_s16","Folding minimum of adjacent pairs"],["vpmin_s32","Folding minimum of adjacent pairs"],["vpmin_s8","Folding minimum of adjacent pairs"],["vpmin_u16","Folding minimum of adjacent pairs"],["vpmin_u32","Folding minimum of adjacent pairs"],["vpmin_u8","Folding minimum of adjacent pairs"],["vpminq_f32","Folding minimum of adjacent pairs"],["vpminq_f64","Folding minimum of adjacent pairs"],["vpminq_s16","Folding minimum of adjacent pairs"],["vpminq_s32","Folding minimum of adjacent pairs"],["vpminq_s8","Folding minimum of adjacent pairs"],["vpminq_u16","Folding minimum of adjacent pairs"],["vpminq_u32","Folding minimum of adjacent pairs"],["vpminq_u8","Folding minimum of adjacent pairs"],["vqtbl1_p8","Table look-up"],["vqtbl1_s8","Table look-up"],["vqtbl1_u8","Table look-up"],["vqtbl1q_p8","Table look-up"],["vqtbl1q_s8","Table look-up"],["vqtbl1q_u8","Table look-up"],["vqtbl2_p8","Table look-up"],["vqtbl2_s8","Table look-up"],["vqtbl2_u8","Table look-up"],["vqtbl2q_p8","Table look-up"],["vqtbl2q_s8","Table look-up"],["vqtbl2q_u8","Table look-up"],["vqtbl3_p8","Table look-up"],["vqtbl3_s8","Table look-up"],["vqtbl3_u8","Table look-up"],["vqtbl3q_p8","Table look-up"],["vqtbl3q_s8","Table look-up"],["vqtbl3q_u8","Table look-up"],["vqtbl4_p8","Table look-up"],["vqtbl4_s8","Table look-up"],["vqtbl4_u8","Table look-up"],["vqtbl4q_p8","Table look-up"],["vqtbl4q_s8","Table look-up"],["vqtbl4q_u8","Table look-up"],["vqtbx1_p8","Extended table look-up"],["vqtbx1_s8","Extended table look-up"],["vqtbx1_u8","Extended table look-up"],["vqtbx1q_p8","Extended table look-up"],["vqtbx1q_s8","Extended table look-up"],["vqtbx1q_u8","Extended table look-up"],["vqtbx2_p8","Extended table look-up"],["vqtbx2_s8","Extended table look-up"],["vqtbx2_u8","Extended table look-up"],["vqtbx2q_p8","Extended table look-up"],["vqtbx2q_s8","Extended table look-up"],["vqtbx2q_u8","Extended table look-up"],["vqtbx3_p8","Extended table look-up"],["vqtbx3_s8","Extended table look-up"],["vqtbx3_u8","Extended table look-up"],["vqtbx3q_p8","Extended table look-up"],["vqtbx3q_s8","Extended table look-up"],["vqtbx3q_u8","Extended table look-up"],["vqtbx4_p8","Extended table look-up"],["vqtbx4_s8","Extended table look-up"],["vqtbx4_u8","Extended table look-up"],["vqtbx4q_p8","Extended table look-up"],["vqtbx4q_s8","Extended table look-up"],["vqtbx4q_u8","Extended table look-up"],["vrsqrte_f32","Reciprocal square-root estimate."],["vsha1cq_u32","SHA1 hash update accelerator, choose."],["vsha1h_u32","SHA1 fixed rotate."],["vsha1mq_u32","SHA1 hash update accelerator, majority."],["vsha1pq_u32","SHA1 hash update accelerator, parity."],["vsha1su0q_u32","SHA1 schedule update accelerator, first part."],["vsha1su1q_u32","SHA1 schedule update accelerator, second part."],["vsha256h2q_u32","SHA256 hash update accelerator, upper part."],["vsha256hq_u32","SHA256 hash update accelerator."],["vsha256su0q_u32","SHA256 schedule update accelerator, first part."],["vsha256su1q_u32","SHA256 schedule update accelerator, second part."],["vtbl1_p8","Table look-up"],["vtbl1_s8","Table look-up"],["vtbl1_u8","Table look-up"],["vtbl2_p8","Table look-up"],["vtbl2_s8","Table look-up"],["vtbl2_u8","Table look-up"],["vtbl3_p8","Table look-up"],["vtbl3_s8","Table look-up"],["vtbl3_u8","Table look-up"],["vtbl4_p8","Table look-up"],["vtbl4_s8","Table look-up"],["vtbl4_u8","Table look-up"],["vtbx1_p8","Extended table look-up"],["vtbx1_s8","Extended table look-up"],["vtbx1_u8","Extended table look-up"],["vtbx2_p8","Extended table look-up"],["vtbx2_s8","Extended table look-up"],["vtbx2_u8","Extended table look-up"],["vtbx3_p8","Extended table look-up"],["vtbx3_s8","Extended table look-up"],["vtbx3_u8","Extended table look-up"],["vtbx4_p8","Extended table look-up"],["vtbx4_s8","Extended table look-up"],["vtbx4_u8","Extended table look-up"]],"struct":[["float32x2_t","ARM-specific 64-bit wide vector of two packed `f32`."],["float32x4_t","ARM-specific 128-bit wide vector of four packed `f32`."],["float64x1_t","ARM-specific 64-bit wide vector of one packed `f64`."],["float64x2_t","ARM-specific 128-bit wide vector of two packed `f64`."],["int16x2_t","ARM-specific 32-bit wide vector of two packed `i16`."],["int16x4_t","ARM-specific 64-bit wide vector of four packed `i16`."],["int16x8_t","ARM-specific 128-bit wide vector of eight packed `i16`."],["int32x2_t","ARM-specific 64-bit wide vector of two packed `i32`."],["int32x4_t","ARM-specific 128-bit wide vector of four packed `i32`."],["int64x1_t","ARM-specific 64-bit wide vector of one packed `i64`."],["int64x2_t","ARM-specific 128-bit wide vector of two packed `i64`."],["int8x16_t","ARM-specific 128-bit wide vector of sixteen packed `i8`."],["int8x16x2_t","ARM-specific type containing two `int8x16_t` vectors."],["int8x16x3_t","ARM-specific type containing three `int8x16_t` vectors."],["int8x16x4_t","ARM-specific type containing four `int8x16_t` vectors."],["int8x4_t","ARM-specific 32-bit wide vector of four packed `i8`."],["int8x8_t","ARM-specific 64-bit wide vector of eight packed `i8`."],["int8x8x2_t","ARM-specific type containing two `int8x8_t` vectors."],["int8x8x3_t","ARM-specific type containing three `int8x8_t` vectors."],["int8x8x4_t","ARM-specific type containing four `int8x8_t` vectors."],["poly16x4_t","ARM-specific 64-bit wide vector of four packed `u16`."],["poly16x8_t","ARM-specific 128-bit wide vector of eight packed `u16`."],["poly64x1_t","ARM-specific 64-bit wide vector of one packed `p64`."],["poly64x2_t","ARM-specific 64-bit wide vector of two packed `p64`."],["poly8x16_t","ARM-specific 128-bit wide vector of sixteen packed `u8`."],["poly8x16x2_t","ARM-specific type containing two `poly8x16_t` vectors."],["poly8x16x3_t","ARM-specific type containing three `poly8x16_t` vectors."],["poly8x16x4_t","ARM-specific type containing four `poly8x16_t` vectors."],["poly8x8_t","ARM-specific 64-bit wide polynomial vector of eight packed `u8`."],["poly8x8x2_t","ARM-specific type containing two `poly8x8_t` vectors."],["poly8x8x3_t","ARM-specific type containing three `poly8x8_t` vectors."],["poly8x8x4_t","ARM-specific type containing four `poly8x8_t` vectors."],["uint16x2_t","ARM-specific 32-bit wide vector of two packed `u16`."],["uint16x4_t","ARM-specific 64-bit wide vector of four packed `u16`."],["uint16x8_t","ARM-specific 128-bit wide vector of eight packed `u16`."],["uint32x2_t","ARM-specific 64-bit wide vector of two packed `u32`."],["uint32x4_t","ARM-specific 128-bit wide vector of four packed `u32`."],["uint64x1_t","ARM-specific 64-bit wide vector of one packed `u64`."],["uint64x2_t","ARM-specific 128-bit wide vector of two packed `u64`."],["uint8x16_t","ARM-specific 128-bit wide vector of sixteen packed `u8`."],["uint8x16x2_t","ARM-specific type containing two `uint8x16_t` vectors."],["uint8x16x3_t","ARM-specific type containing three `uint8x16_t` vectors."],["uint8x16x4_t","ARM-specific type containing four `uint8x16_t` vectors."],["uint8x4_t","ARM-specific 32-bit wide vector of four packed `u8`."],["uint8x8_t","ARM-specific 64-bit wide vector of eight packed `u8`."],["uint8x8x2_t","ARM-specific type containing two `uint8x8_t` vectors."],["uint8x8x3_t","ARM-specific type containing three `uint8x8_t` vectors."],["uint8x8x4_t","ARM-specific type containing four `uint8x8_t` vectors."]]});